import {
  script as script3
} from "./chunk-5Q66CEXO.js";
import {
  Ripple
} from "./chunk-UGABBOX4.js";
import {
  script as script2
} from "./chunk-BWPDOTJH.js";
import {
  script
} from "./chunk-F6MXBAOJ.js";
import {
  DomHandler,
  UniqueComponentId
} from "./chunk-KVZVHD2M.js";
import "./chunk-JLNDDK7J.js";
import {
  Fragment,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  mergeProps,
  openBlock,
  renderList,
  renderSlot,
  resolveDirective,
  resolveDynamicComponent,
  vShow,
  withDirectives
} from "./chunk-BFN7R65F.js";
import {
  toDisplayString
} from "./chunk-G2WEGQUA.js";
import "./chunk-QOVRSCHT.js";

// node_modules/primevue/icons/chevronleft/index.esm.js
var script4 = {
  name: "ChevronLeftIcon",
  extends: script2
};
var _hoisted_1 = createBaseVNode("path", {
  d: "M9.61296 13C9.50997 13.0005 9.40792 12.9804 9.3128 12.9409C9.21767 12.9014 9.13139 12.8433 9.05902 12.7701L3.83313 7.54416C3.68634 7.39718 3.60388 7.19795 3.60388 6.99022C3.60388 6.78249 3.68634 6.58325 3.83313 6.43628L9.05902 1.21039C9.20762 1.07192 9.40416 0.996539 9.60724 1.00012C9.81032 1.00371 10.0041 1.08597 10.1477 1.22959C10.2913 1.37322 10.3736 1.56698 10.3772 1.77005C10.3808 1.97313 10.3054 2.16968 10.1669 2.31827L5.49496 6.99022L10.1669 11.6622C10.3137 11.8091 10.3962 12.0084 10.3962 12.2161C10.3962 12.4238 10.3137 12.6231 10.1669 12.7701C10.0945 12.8433 10.0083 12.9014 9.91313 12.9409C9.81801 12.9804 9.71596 13.0005 9.61296 13Z",
  fill: "currentColor"
}, null, -1);
var _hoisted_2 = [
  _hoisted_1
];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("svg", mergeProps({
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, _ctx.pti()), _hoisted_2, 16);
}
script4.render = render;

// node_modules/primevue/tabview/tabview.esm.js
var script5 = {
  name: "TabView",
  extends: script,
  emits: ["update:activeIndex", "tab-change", "tab-click"],
  props: {
    activeIndex: {
      type: Number,
      default: 0
    },
    lazy: {
      type: Boolean,
      default: false
    },
    scrollable: {
      type: Boolean,
      default: false
    },
    tabindex: {
      type: Number,
      default: 0
    },
    selectOnFocus: {
      type: Boolean,
      default: false
    },
    previousButtonProps: {
      type: null,
      default: null
    },
    nextButtonProps: {
      type: null,
      default: null
    },
    prevIcon: {
      type: String,
      default: void 0
    },
    nextIcon: {
      type: String,
      default: void 0
    }
  },
  data() {
    return {
      id: this.$attrs.id,
      d_activeIndex: this.activeIndex,
      isPrevButtonDisabled: true,
      isNextButtonDisabled: false
    };
  },
  watch: {
    "$attrs.id": function(newValue) {
      this.id = newValue || UniqueComponentId();
    },
    activeIndex(newValue) {
      this.d_activeIndex = newValue;
      this.scrollInView({ index: newValue });
    }
  },
  mounted() {
    this.id = this.id || UniqueComponentId();
    this.updateInkBar();
    this.scrollable && this.updateButtonState();
  },
  updated() {
    this.updateInkBar();
  },
  methods: {
    isTabPanel(child) {
      return child.type.name === "TabPanel";
    },
    isTabActive(index) {
      return this.d_activeIndex === index;
    },
    getTabProp(tab, name) {
      return tab.props ? tab.props[name] : void 0;
    },
    getKey(tab, index) {
      return this.getTabProp(tab, "header") || index;
    },
    getTabHeaderActionId(index) {
      return `${this.id}_${index}_header_action`;
    },
    getTabContentId(index) {
      return `${this.id}_${index}_content`;
    },
    getTabPT(tab, key) {
      return this.ptmo(this.getTabProp(tab, "pt"), key, {
        props: tab.props,
        parent: {
          props: this.$props,
          state: this.$data
        }
      });
    },
    onScroll(event) {
      this.scrollable && this.updateButtonState();
      event.preventDefault();
    },
    onPrevButtonClick() {
      const content = this.$refs.content;
      const width = DomHandler.getWidth(content);
      const pos = content.scrollLeft - width;
      content.scrollLeft = pos <= 0 ? 0 : pos;
    },
    onNextButtonClick() {
      const content = this.$refs.content;
      const width = DomHandler.getWidth(content) - this.getVisibleButtonWidths();
      const pos = content.scrollLeft + width;
      const lastPos = content.scrollWidth - width;
      content.scrollLeft = pos >= lastPos ? lastPos : pos;
    },
    onTabClick(event, tab, index) {
      this.changeActiveIndex(event, tab, index);
      this.$emit("tab-click", { originalEvent: event, index });
    },
    onTabKeyDown(event, tab, index) {
      switch (event.code) {
        case "ArrowLeft":
          this.onTabArrowLeftKey(event);
          break;
        case "ArrowRight":
          this.onTabArrowRightKey(event);
          break;
        case "Home":
          this.onTabHomeKey(event);
          break;
        case "End":
          this.onTabEndKey(event);
          break;
        case "PageDown":
          this.onPageDownKey(event);
          break;
        case "PageUp":
          this.onPageUpKey(event);
          break;
        case "Enter":
        case "Space":
          this.onTabEnterKey(event, tab, index);
          break;
      }
    },
    onTabArrowRightKey(event) {
      const nextHeaderAction = this.findNextHeaderAction(event.target.parentElement);
      nextHeaderAction ? this.changeFocusedTab(event, nextHeaderAction) : this.onTabHomeKey(event);
      event.preventDefault();
    },
    onTabArrowLeftKey(event) {
      const prevHeaderAction = this.findPrevHeaderAction(event.target.parentElement);
      prevHeaderAction ? this.changeFocusedTab(event, prevHeaderAction) : this.onTabEndKey(event);
      event.preventDefault();
    },
    onTabHomeKey(event) {
      const firstHeaderAction = this.findFirstHeaderAction();
      this.changeFocusedTab(event, firstHeaderAction);
      event.preventDefault();
    },
    onTabEndKey(event) {
      const lastHeaderAction = this.findLastHeaderAction();
      this.changeFocusedTab(event, lastHeaderAction);
      event.preventDefault();
    },
    onPageDownKey(event) {
      this.scrollInView({ index: this.$refs.nav.children.length - 2 });
      event.preventDefault();
    },
    onPageUpKey(event) {
      this.scrollInView({ index: 0 });
      event.preventDefault();
    },
    onTabEnterKey(event, tab, index) {
      this.changeActiveIndex(event, tab, index);
      event.preventDefault();
    },
    findNextHeaderAction(tabElement, selfCheck = false) {
      const headerElement = selfCheck ? tabElement : tabElement.nextElementSibling;
      return headerElement ? DomHandler.hasClass(headerElement, "p-disabled") || DomHandler.hasClass(headerElement, "p-tabview-ink-bar") ? this.findNextHeaderAction(headerElement) : DomHandler.findSingle(headerElement, ".p-tabview-header-action") : null;
    },
    findPrevHeaderAction(tabElement, selfCheck = false) {
      const headerElement = selfCheck ? tabElement : tabElement.previousElementSibling;
      return headerElement ? DomHandler.hasClass(headerElement, "p-disabled") || DomHandler.hasClass(headerElement, "p-tabview-ink-bar") ? this.findPrevHeaderAction(headerElement) : DomHandler.findSingle(headerElement, ".p-tabview-header-action") : null;
    },
    findFirstHeaderAction() {
      return this.findNextHeaderAction(this.$refs.nav.firstElementChild, true);
    },
    findLastHeaderAction() {
      return this.findPrevHeaderAction(this.$refs.nav.lastElementChild, true);
    },
    changeActiveIndex(event, tab, index) {
      if (!this.getTabProp(tab, "disabled") && this.d_activeIndex !== index) {
        this.d_activeIndex = index;
        this.$emit("update:activeIndex", index);
        this.$emit("tab-change", { originalEvent: event, index });
        this.scrollInView({ index });
      }
    },
    changeFocusedTab(event, element) {
      if (element) {
        DomHandler.focus(element);
        this.scrollInView({ element });
        if (this.selectOnFocus) {
          const index = parseInt(element.parentElement.dataset.index, 10);
          const tab = this.tabs[index];
          this.changeActiveIndex(event, tab, index);
        }
      }
    },
    scrollInView({ element, index = -1 }) {
      const currentElement = element || this.$refs.nav.children[index];
      if (currentElement) {
        currentElement.scrollIntoView && currentElement.scrollIntoView({ block: "nearest" });
      }
    },
    updateInkBar() {
      let tabHeader = this.$refs.nav.children[this.d_activeIndex];
      this.$refs.inkbar.style.width = DomHandler.getWidth(tabHeader) + "px";
      this.$refs.inkbar.style.left = DomHandler.getOffset(tabHeader).left - DomHandler.getOffset(this.$refs.nav).left + "px";
    },
    updateButtonState() {
      const content = this.$refs.content;
      const { scrollLeft, scrollWidth } = content;
      const width = DomHandler.getWidth(content);
      this.isPrevButtonDisabled = scrollLeft === 0;
      this.isNextButtonDisabled = parseInt(scrollLeft) === scrollWidth - width;
    },
    getVisibleButtonWidths() {
      const { prevBtn, nextBtn } = this.$refs;
      return [prevBtn, nextBtn].reduce((acc, el) => el ? acc + DomHandler.getWidth(el) : acc, 0);
    },
    getTabHeaderClass(tab, i) {
      return [
        "p-tabview-header",
        this.getTabProp(tab, "headerClass"),
        {
          "p-highlight": this.d_activeIndex === i,
          "p-disabled": this.getTabProp(tab, "disabled")
        }
      ];
    },
    getTabContentClass(tab) {
      return ["p-tabview-panel", this.getTabProp(tab, "contentClass")];
    }
  },
  computed: {
    contentClasses() {
      return [
        "p-tabview p-component",
        {
          "p-tabview-scrollable": this.scrollable
        }
      ];
    },
    tabs() {
      return this.$slots.default().reduce((tabs, child) => {
        if (this.isTabPanel(child)) {
          tabs.push(child);
        } else if (child.children && child.children instanceof Array) {
          child.children.forEach((nestedChild) => {
            if (this.isTabPanel(nestedChild)) {
              tabs.push(nestedChild);
            }
          });
        }
        return tabs;
      }, []);
    },
    prevButtonAriaLabel() {
      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.previous : void 0;
    },
    nextButtonAriaLabel() {
      return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.next : void 0;
    }
  },
  directives: {
    ripple: Ripple
  },
  components: {
    ChevronLeftIcon: script4,
    ChevronRightIcon: script3
  }
};
var _hoisted_12 = ["tabindex", "aria-label"];
var _hoisted_22 = ["data-index"];
var _hoisted_3 = ["id", "tabindex", "aria-disabled", "aria-selected", "aria-controls", "onClick", "onKeydown"];
var _hoisted_4 = ["tabindex", "aria-label"];
var _hoisted_5 = ["aria-labelledby"];
function render2(_ctx, _cache, $props, $setup, $data, $options) {
  const _directive_ripple = resolveDirective("ripple");
  return openBlock(), createElementBlock("div", mergeProps({ class: $options.contentClasses }, _ctx.ptm("root")), [
    createBaseVNode("div", mergeProps({ class: "p-tabview-nav-container" }, _ctx.ptm("navcontainer")), [
      $props.scrollable && !$data.isPrevButtonDisabled ? withDirectives((openBlock(), createElementBlock("button", mergeProps({
        key: 0,
        ref: "prevBtn",
        type: "button",
        class: "p-tabview-nav-prev p-tabview-nav-btn p-link",
        tabindex: $props.tabindex,
        "aria-label": $options.prevButtonAriaLabel,
        onClick: _cache[0] || (_cache[0] = (...args) => $options.onPrevButtonClick && $options.onPrevButtonClick(...args))
      }, { ...$props.previousButtonProps, ..._ctx.ptm("prevbutton") }), [
        renderSlot(_ctx.$slots, "previcon", {}, () => [
          (openBlock(), createBlock(resolveDynamicComponent($props.prevIcon ? "span" : "ChevronLeftIcon"), mergeProps({
            "aria-hidden": "true",
            class: $props.prevIcon
          }, _ctx.ptm("previcon")), null, 16, ["class"]))
        ])
      ], 16, _hoisted_12)), [
        [_directive_ripple]
      ]) : createCommentVNode("", true),
      createBaseVNode("div", mergeProps({
        ref: "content",
        class: "p-tabview-nav-content",
        onScroll: _cache[1] || (_cache[1] = (...args) => $options.onScroll && $options.onScroll(...args))
      }, _ctx.ptm("navcontent")), [
        createBaseVNode("ul", mergeProps({
          ref: "nav",
          class: "p-tabview-nav",
          role: "tablist"
        }, _ctx.ptm("nav")), [
          (openBlock(true), createElementBlock(Fragment, null, renderList($options.tabs, (tab, i) => {
            return openBlock(), createElementBlock("li", mergeProps({
              key: $options.getKey(tab, i),
              style: $options.getTabProp(tab, "headerStyle"),
              class: $options.getTabHeaderClass(tab, i),
              role: "presentation",
              "data-index": i
            }, { ...$options.getTabProp(tab, "headerProps"), ...$options.getTabPT(tab, "root"), ...$options.getTabPT(tab, "header") }), [
              withDirectives((openBlock(), createElementBlock("a", mergeProps({
                id: $options.getTabHeaderActionId(i),
                class: "p-tabview-nav-link p-tabview-header-action",
                tabindex: $options.getTabProp(tab, "disabled") || !$options.isTabActive(i) ? -1 : $props.tabindex,
                role: "tab",
                "aria-disabled": $options.getTabProp(tab, "disabled"),
                "aria-selected": $options.isTabActive(i),
                "aria-controls": $options.getTabContentId(i),
                onClick: ($event) => $options.onTabClick($event, tab, i),
                onKeydown: ($event) => $options.onTabKeyDown($event, tab, i)
              }, { ...$options.getTabProp(tab, "headerActionProps"), ...$options.getTabPT(tab, "headeraction") }), [
                tab.props && tab.props.header ? (openBlock(), createElementBlock("span", mergeProps({
                  key: 0,
                  class: "p-tabview-title"
                }, $options.getTabPT(tab, "headertitle")), toDisplayString(tab.props.header), 17)) : createCommentVNode("", true),
                tab.children && tab.children.header ? (openBlock(), createBlock(resolveDynamicComponent(tab.children.header), { key: 1 })) : createCommentVNode("", true)
              ], 16, _hoisted_3)), [
                [_directive_ripple]
              ])
            ], 16, _hoisted_22);
          }), 128)),
          createBaseVNode("li", mergeProps({
            ref: "inkbar",
            class: "p-tabview-ink-bar",
            role: "presentation",
            "aria-hidden": "true"
          }, _ctx.ptm("inkbar")), null, 16)
        ], 16)
      ], 16),
      $props.scrollable && !$data.isNextButtonDisabled ? withDirectives((openBlock(), createElementBlock("button", mergeProps({
        key: 1,
        ref: "nextBtn",
        type: "button",
        class: "p-tabview-nav-next p-tabview-nav-btn p-link",
        tabindex: $props.tabindex,
        "aria-label": $options.nextButtonAriaLabel,
        onClick: _cache[2] || (_cache[2] = (...args) => $options.onNextButtonClick && $options.onNextButtonClick(...args))
      }, { ...$props.nextButtonProps, ..._ctx.ptm("nextbutton") }), [
        renderSlot(_ctx.$slots, "nexticon", {}, () => [
          (openBlock(), createBlock(resolveDynamicComponent($props.nextIcon ? "span" : "ChevronRightIcon"), mergeProps({
            "aria-hidden": "true",
            class: $props.nextIcon
          }, _ctx.ptm("nexticon")), null, 16, ["class"]))
        ])
      ], 16, _hoisted_4)), [
        [_directive_ripple]
      ]) : createCommentVNode("", true)
    ], 16),
    createBaseVNode("div", mergeProps({ class: "p-tabview-panels" }, _ctx.ptm("panelcontainer")), [
      (openBlock(true), createElementBlock(Fragment, null, renderList($options.tabs, (tab, i) => {
        return openBlock(), createElementBlock(Fragment, {
          key: $options.getKey(tab, i)
        }, [
          ($props.lazy ? $options.isTabActive(i) : true) ? withDirectives((openBlock(), createElementBlock("div", mergeProps({
            key: 0,
            style: $options.getTabProp(tab, "contentStyle"),
            class: $options.getTabContentClass(tab),
            role: "tabpanel",
            "aria-labelledby": $options.getTabHeaderActionId(i)
          }, { ...$options.getTabProp(tab, "contentProps"), ...$options.getTabPT(tab, "root"), ...$options.getTabPT(tab, "content") }), [
            (openBlock(), createBlock(resolveDynamicComponent(tab)))
          ], 16, _hoisted_5)), [
            [vShow, $props.lazy ? true : $options.isTabActive(i)]
          ]) : createCommentVNode("", true)
        ], 64);
      }), 128))
    ], 16)
  ], 16);
}
function styleInject(css, ref) {
  if (ref === void 0)
    ref = {};
  var insertAt = ref.insertAt;
  if (!css || typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = "\n.p-tabview-nav-container {\n    position: relative;\n}\n.p-tabview-scrollable .p-tabview-nav-container {\n    overflow: hidden;\n}\n.p-tabview-nav-content {\n    overflow-x: auto;\n    overflow-y: hidden;\n    scroll-behavior: smooth;\n    scrollbar-width: none;\n    overscroll-behavior: contain auto;\n}\n.p-tabview-nav {\n    display: flex;\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    flex: 1 1 auto;\n}\n.p-tabview-header-action {\n    cursor: pointer;\n    user-select: none;\n    display: flex;\n    align-items: center;\n    position: relative;\n    text-decoration: none;\n    overflow: hidden;\n}\n.p-tabview-ink-bar {\n    display: none;\n    z-index: 1;\n}\n.p-tabview-header-action:focus {\n    z-index: 1;\n}\n.p-tabview-title {\n    line-height: 1;\n    white-space: nowrap;\n}\n.p-tabview-nav-btn {\n    position: absolute;\n    top: 0;\n    z-index: 2;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n.p-tabview-nav-prev {\n    left: 0;\n}\n.p-tabview-nav-next {\n    right: 0;\n}\n.p-tabview-nav-content::-webkit-scrollbar {\n    display: none;\n}\n";
styleInject(css_248z);
script5.render = render2;

// dep:primevue_tabview
var primevue_tabview_default = script5;
export {
  primevue_tabview_default as default
};
//# sourceMappingURL=primevue_tabview.js.map
